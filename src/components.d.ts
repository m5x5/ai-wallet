/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AIWalletConfig } from "./components/ai-wallet/ai-wallet";
import { RemoteStorage } from "remotestoragejs";
export { AIWalletConfig } from "./components/ai-wallet/ai-wallet";
export { RemoteStorage } from "remotestoragejs";
export namespace Components {
    interface AiWallet {
        /**
          * @default ["vlm", "llm", "sst", "tts"]
         */
        "capabilities": any;
        "cardTitle": string;
        "getConfiguration": () => Promise<AIWalletConfig>;
        "getRemoteStorage": () => Promise<any>;
        "saveConfiguration": () => Promise<boolean>;
        "subtitle": string;
        /**
          * @default true
         */
        "sync": boolean;
    }
    interface ConnectRemotestorage {
        "rs": RemoteStorage;
    }
    interface DemoSection {
    }
    interface FooterNav {
    }
    interface HeroSection {
    }
    interface MainApp {
    }
    interface TopNavBar {
    }
}
export interface AiWalletCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLAiWalletElement;
}
declare global {
    interface HTMLAiWalletElementEventMap {
        "configChanged": AIWalletConfig;
    }
    interface HTMLAiWalletElement extends Components.AiWallet, HTMLStencilElement {
        addEventListener<K extends keyof HTMLAiWalletElementEventMap>(type: K, listener: (this: HTMLAiWalletElement, ev: AiWalletCustomEvent<HTMLAiWalletElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLAiWalletElementEventMap>(type: K, listener: (this: HTMLAiWalletElement, ev: AiWalletCustomEvent<HTMLAiWalletElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLAiWalletElement: {
        prototype: HTMLAiWalletElement;
        new (): HTMLAiWalletElement;
    };
    interface HTMLConnectRemotestorageElement extends Components.ConnectRemotestorage, HTMLStencilElement {
    }
    var HTMLConnectRemotestorageElement: {
        prototype: HTMLConnectRemotestorageElement;
        new (): HTMLConnectRemotestorageElement;
    };
    interface HTMLDemoSectionElement extends Components.DemoSection, HTMLStencilElement {
    }
    var HTMLDemoSectionElement: {
        prototype: HTMLDemoSectionElement;
        new (): HTMLDemoSectionElement;
    };
    interface HTMLFooterNavElement extends Components.FooterNav, HTMLStencilElement {
    }
    var HTMLFooterNavElement: {
        prototype: HTMLFooterNavElement;
        new (): HTMLFooterNavElement;
    };
    interface HTMLHeroSectionElement extends Components.HeroSection, HTMLStencilElement {
    }
    var HTMLHeroSectionElement: {
        prototype: HTMLHeroSectionElement;
        new (): HTMLHeroSectionElement;
    };
    interface HTMLMainAppElement extends Components.MainApp, HTMLStencilElement {
    }
    var HTMLMainAppElement: {
        prototype: HTMLMainAppElement;
        new (): HTMLMainAppElement;
    };
    interface HTMLTopNavBarElement extends Components.TopNavBar, HTMLStencilElement {
    }
    var HTMLTopNavBarElement: {
        prototype: HTMLTopNavBarElement;
        new (): HTMLTopNavBarElement;
    };
    interface HTMLElementTagNameMap {
        "ai-wallet": HTMLAiWalletElement;
        "connect-remotestorage": HTMLConnectRemotestorageElement;
        "demo-section": HTMLDemoSectionElement;
        "footer-nav": HTMLFooterNavElement;
        "hero-section": HTMLHeroSectionElement;
        "main-app": HTMLMainAppElement;
        "top-nav-bar": HTMLTopNavBarElement;
    }
}
declare namespace LocalJSX {
    interface AiWallet {
        /**
          * @default ["vlm", "llm", "sst", "tts"]
         */
        "capabilities"?: any;
        "cardTitle"?: string;
        "onConfigChanged"?: (event: AiWalletCustomEvent<AIWalletConfig>) => void;
        "subtitle"?: string;
        /**
          * @default true
         */
        "sync"?: boolean;
    }
    interface ConnectRemotestorage {
        "rs"?: RemoteStorage;
    }
    interface DemoSection {
    }
    interface FooterNav {
    }
    interface HeroSection {
    }
    interface MainApp {
    }
    interface TopNavBar {
    }
    interface IntrinsicElements {
        "ai-wallet": AiWallet;
        "connect-remotestorage": ConnectRemotestorage;
        "demo-section": DemoSection;
        "footer-nav": FooterNav;
        "hero-section": HeroSection;
        "main-app": MainApp;
        "top-nav-bar": TopNavBar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ai-wallet": LocalJSX.AiWallet & JSXBase.HTMLAttributes<HTMLAiWalletElement>;
            "connect-remotestorage": LocalJSX.ConnectRemotestorage & JSXBase.HTMLAttributes<HTMLConnectRemotestorageElement>;
            "demo-section": LocalJSX.DemoSection & JSXBase.HTMLAttributes<HTMLDemoSectionElement>;
            "footer-nav": LocalJSX.FooterNav & JSXBase.HTMLAttributes<HTMLFooterNavElement>;
            "hero-section": LocalJSX.HeroSection & JSXBase.HTMLAttributes<HTMLHeroSectionElement>;
            "main-app": LocalJSX.MainApp & JSXBase.HTMLAttributes<HTMLMainAppElement>;
            "top-nav-bar": LocalJSX.TopNavBar & JSXBase.HTMLAttributes<HTMLTopNavBarElement>;
        }
    }
}
